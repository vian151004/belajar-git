user.name=Vian Maulana Ramadhan -->git config --global user.email "Vian Maulana Ramadhan"
user.email=vianmaulana540@gmail.com -->git config --global user.email "vianmaulana540@gmail.com"
core.editor=code --wait
diff.tool=default-difftool
difftool.default-difftool.cmd=code --wait --diff $LOCAL $REMOTE

*GIT DASAR*
$ git push -u origin <branchname>
cd belajar-git-dasar --> masuk direktori
git init --> membuat repository di file lokal
git status --> mengetahui sebuah status dari sebuah repository lokal
git add <filename> --> menambahkan file baru di staging index.
git add <filename> <filename> --> menambahkan beberapa file baru ke staging index.
git add . --> menambahkan semua file baru ke stagng index
git commit -m "massagebebas" --> menyimpan perubahan file yang sudah dilakukan ke repository
git commit -a -m "massagebebas" --> memindahkan file lagnsung ke stagging dan repo
git restore <filename> --> membatalkan perubahan file (delete,update dll selama di working)
git restore --staged <filename> --> memindahkan file ke working dir ( dari staging index)
git log --> melihat semua history (terbaru-terlama)
git log -oneline --> melihat semua history (log massage nya aja)
git log --oneline --graph --> melihat semua history (melihat hubungan dgn commit sebelumnya)
						    (belajar git branching dulu)
git show <hash> (melihat) --> melihat perubahan yang terjadi pada sebuah commit
git diff <hash1> <hash2> --> compare commit 
git diff <hash1> HEAD --> compare commit apapun dengan head/commit terbaru
git difftool <hash1><hash2> --> compare commit di gitbash (lihat di vscode hasilnya)
git reset <mode> hash --> reset commit (meggeser commit si HEAD, commit selanjutnya dilakukan pd posisi HEAD baru)
	<mode> = --soft (memindahkan HEAD pointer, tetapi tidak merubah apapun di staging dan working)
		   	 --mixed (memindahkan HEAD pointer, mengubah Staging Index sama seprti Repository tetapi tidak merubah apapun working)
		   	 --hard (memindahkan HEAD pointer, mengubah Staging Index dan Working sama seperti Repository)
git commit --amend -m "massage bebas" --> langsung commit perubahan file tanpa harus commit dari awal(digabungankan dengan commit sebelumnya)
git show HEAD --> melihat perubahan terbaru
git checkout <hash> -- <filename> --> melihat versi  file pada commit sebelumnya
git checkout <hash> --> menuju ke hash tertentu (snapshot sebelumnya)
git checkout <branchname> --> menuju ke paling awal/kembali
git branch --show-current --> melihat nama branch saat ini
git revert <hash> --> untuk revert commit / membatalkan commit sebelumya, commit sebelumnya tidak hilang
menambahkan file .gitignore di Repo --> agar file tidak di track di Git
				    				--> tambahkan tiap baris difile .gitignore berisi folder/file yang tidak ingin ditrack
git blame <filename> --> mencari tahu siapa yang menambah perubahan pada file serta commitnya
Alias --> untuk menambah nam perintsh lain untuk perintah yang sudah ada di git (shortcut)(laptop pribadi)
		contoh: -git config --global alias.ko commit (ko=commit)
				-git config --global alias.komit commit (komit=commit)
				-git config --global alias.logone "log --oneline" (logone=log --oneline)				    
				-git config --global alias.log1 "log --oneline" (log1=log --oneline)				    

*GIT BRANCHING*
git branch --show-current --> melihat posisi branch sekarang
git branch <newbranchname> --> membuat branch baru
git branch --list --> melihat semua branch di repo
git branch --> melihat semua branch di repo
git switch <branchname> --> pindah branch
git checkout <branchname> --> pindah branch
git branch -m <newbranchname> --> rename nama branch (pindah dulu ke branch yang ingin diubah) 
git branch -d <branchname> --> del branch (keluar dari branch yang mau dihapus dulu)
git branch --delete <branchname> --> del branch (keluar dari branch yang mau dihapus dulu)
git push -u origin <branchname>: digunakan dalam mengirimkan perubahan file yang dilakukan setelah di commit ke remote repository

*GITHUB*
-u --> untracked files yang belum masuk ke Git
-m --> modified file yang sudah masuk ke Git dan sudah pernah dimodifikasi
-d --> delete file
-a --> file yang ditambahkan kedalam staging index

*MERGE* (penggabungan 2 branch)
git merge: perintah yang digunakan untuk menggabungkan cabang aktif serta cabang yang dipilih
-pindah dulu ke branch dimana merge mau dilakukan
git merge <branchname> --> branch dari <branchname> akan di merge ke dalam branch saat ini sy berada
git merge --abort --> membatalkan merge
#bila terjadi, harus diperbaiki dulu manual dengan commit file nya dulu
#terjadi apabila 1 file diubah di 2 branch berbeda


